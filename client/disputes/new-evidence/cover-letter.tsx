/**
 * External dependencies
 */
import React, { useEffect, useState } from 'react';
import { __ } from '@wordpress/i18n';
import { external } from '@wordpress/icons';
import { useGetSettings } from 'wcpay/data';

/**
 * Internal dependencies
 */
import {
	TextareaControl,
	Button,
	Icon,
} from 'wcpay/components/wp-components-wrapped';
import { Dispute } from 'wcpay/types/disputes';
import { Charge } from 'wcpay/types/charges';
import { formatDateTimeFromTimestamp } from 'wcpay/utils/date-time';

interface ExtendedDispute extends Omit< Dispute, 'evidence' | 'charge' > {
	merchant_name?: string;
	merchant_address?: string;
	merchant_email?: string;
	merchant_phone?: string;
	evidence: {
		[ key: string ]:
			| string
			| Record< string, boolean >
			| Record< string, string >;
	};
	charge: Charge;
}

interface CoverLetterProps {
	value: string;
	onChange: ( value: string, isManualEdit?: boolean ) => void;
	dispute: ExtendedDispute;
	bankName: string | null;
}

const CoverLetter: React.FC< CoverLetterProps > = ( {
	value,
	onChange,
	dispute,
	bankName,
} ) => {
	const [ isAutoGenerating, setIsAutoGenerating ] = useState( true );
	const [ autoGeneratedContent, setAutoGeneratedContent ] = useState( '' );
	const wcStoreCountry =
		wcSettings?.admin?.preloadSettings?.general
			?.woocommerce_default_country || ':';
	const [ storeCountry, storeState ] = wcStoreCountry.split( ':' );
	const [ accountDetails ] = useState( {
		name: wcSettings?.siteTitle || '<Your Business Name>',
		support_address_city:
			wcSettings?.admin?.preloadSettings?.general
				?.woocommerce_store_city || '',
		support_address_country: storeCountry,
		support_address_line1:
			wcSettings?.admin?.preloadSettings?.general
				?.woocommerce_store_address || '',
		support_address_line2:
			wcSettings?.admin?.preloadSettings?.general
				?.woocommerce_store_address_2 || '',
		support_address_postal_code:
			wcSettings?.admin?.preloadSettings?.general
				?.woocommerce_store_postcode || '',
		support_address_state: storeState,
	} );
	const settings = useGetSettings();

	useEffect( () => {
		if (
			! dispute ||
			! accountDetails ||
			Object.keys( accountDetails ).length === 0 ||
			! settings ||
			Object.keys( settings ).length === 0
		) {
			return;
		}
		const generateCoverLetter = () => {
			const merchantAddress = `${ accountDetails.support_address_line1 }, ${ accountDetails.support_address_line2 }, ${ accountDetails.support_address_city }, ${ accountDetails.support_address_state } ${ accountDetails.support_address_postal_code } ${ accountDetails.support_address_country }`;
			const merchantName = accountDetails.name;
			const merchantEmail =
				settings?.account_business_support_email ||
				__( '<business@email.com>', 'woocommerce-payments' );
			const merchantPhone =
				settings?.account_business_support_phone ||
				__( '<Business Phone Number>', 'woocommerce-payments' );
			const today = new Date().toLocaleDateString( undefined, {
				year: 'numeric',
				month: 'long',
				day: 'numeric',
			} );
			const acquiringBank =
				bankName || __( '<Bank Name>', 'woocommerce-payments' );
			const caseNumber =
				dispute?.id || __( '<Case Number>', 'woocommerce-payments' );
			const transactionId =
				dispute?.charge?.id ||
				__( '<Transaction ID>', 'woocommerce-payments' );
			const transactionDate = dispute?.created
				? formatDateTimeFromTimestamp( dispute.created, {
						separator: ', ',
						includeTime: true,
				  } )
				: __( '<Transaction Date>', 'woocommerce-payments' );
			const customerName =
				dispute?.charge?.billing_details?.name ||
				__( '<Customer Name>', 'woocommerce-payments' );
			const product =
				dispute?.evidence?.product_description ||
				__( '<Product>', 'woocommerce-payments' );
			const orderDate = dispute?.charge?.created
				? formatDateTimeFromTimestamp( dispute.charge.created, {
						separator: ', ',
						includeTime: true,
				  } )
				: __( '<Order Date>', 'woocommerce-payments' );

			// Generate list of attachments based on provided evidence
			const attachments = [];
			let attachmentCount = 0;

			if ( dispute.evidence?.receipt ) {
				attachmentCount++;
				attachments.push(
					`• ${ __(
						'Order receipt',
						'woocommerce-payments'
					) } (${ __(
						'Attachment',
						'woocommerce-payments'
					) } ${ String.fromCharCode( 64 + attachmentCount ) })`
				);
			}
			if ( dispute.evidence?.customer_communication ) {
				attachmentCount++;
				attachments.push(
					`• ${ __(
						'Customer communication',
						'woocommerce-payments'
					) } (${ __(
						'Attachment',
						'woocommerce-payments'
					) } ${ String.fromCharCode( 64 + attachmentCount ) })`
				);
			}
			if ( dispute.evidence?.customer_signature ) {
				attachmentCount++;
				attachments.push(
					`• ${ __(
						'Customer signature',
						'woocommerce-payments'
					) } (${ __(
						'Attachment',
						'woocommerce-payments'
					) } ${ String.fromCharCode( 64 + attachmentCount ) })`
				);
			}
			if ( dispute.evidence?.refund_policy ) {
				attachmentCount++;
				attachments.push(
					`• ${ __(
						'Store refund policy',
						'woocommerce-payments'
					) } (${ __(
						'Attachment',
						'woocommerce-payments'
					) } ${ String.fromCharCode( 64 + attachmentCount ) })`
				);
			}
			if ( dispute.evidence?.shipping_documentation ) {
				attachmentCount++;
				attachments.push(
					`• ${ __(
						'Proof of shipping',
						'woocommerce-payments'
					) } (${ __(
						'Attachment',
						'woocommerce-payments'
					) } ${ String.fromCharCode( 64 + attachmentCount ) })`
				);
			}
			if ( dispute.evidence?.service_documentation ) {
				attachmentCount++;
				attachments.push(
					`• ${ __(
						'Service documentation',
						'woocommerce-payments'
					) } (${ __(
						'Attachment',
						'woocommerce-payments'
					) } ${ String.fromCharCode( 64 + attachmentCount ) })`
				);
			}
			if ( dispute.evidence?.cancellation_policy ) {
				attachmentCount++;
				attachments.push(
					`• ${ __(
						'Cancellation policy',
						'woocommerce-payments'
					) } (${ __(
						'Attachment',
						'woocommerce-payments'
					) } ${ String.fromCharCode( 64 + attachmentCount ) })`
				);
			}
			if ( dispute.evidence?.access_activity_log ) {
				attachmentCount++;
				attachments.push(
					`• ${ __(
						'Access activity log',
						'woocommerce-payments'
					) } (${ __(
						'Attachment',
						'woocommerce-payments'
					) } ${ String.fromCharCode( 64 + attachmentCount ) })`
				);
			}
			if ( dispute.evidence?.uncategorized_file ) {
				attachmentCount++;
				attachments.push(
					`• ${ __(
						'Additional documentation',
						'woocommerce-payments'
					) } (${ __(
						'Attachment',
						'woocommerce-payments'
					) } ${ String.fromCharCode( 64 + attachmentCount ) })`
				);
			}

			// If no attachments were provided, use default list
			const attachmentsList =
				attachments.length > 0
					? attachments.join( '\n' )
					: `• ${ __(
							'AVS/CVV Match: Billing address and security code matched',
							'woocommerce-payments'
					  ) } (${ __( 'Attachment', 'woocommerce-payments' ) } A)
• ${ __(
							'IP/Device Data: Location and device info used at purchase',
							'woocommerce-payments'
					  ) } (${ __( 'Attachment', 'woocommerce-payments' ) } B)
• ${ __(
							'Customer Confirmation: Email or chat confirming purchase',
							'woocommerce-payments'
					  ) } (${ __( 'Attachment', 'woocommerce-payments' ) } C)
• ${ __(
							'Usage Data: Login records for the digital goods',
							'woocommerce-payments'
					  ) } (${ __( 'Attachment', 'woocommerce-payments' ) } D)`;

			// Generate each section separately
			const header = `${ merchantName }
${ merchantAddress }
${ merchantEmail }
${ merchantPhone }
${ today }`;

			const recipient = `${ __(
				'To:',
				'woocommerce-payments'
			) } ${ acquiringBank }
${ __( 'Subject:', 'woocommerce-payments' ) } ${ __(
				'Chargeback Dispute',
				'woocommerce-payments'
			) } – ${ __( 'Case', 'woocommerce-payments' ) } #${ caseNumber }`;

			const greeting = __(
				'Dear Dispute Resolution Team,',
				'woocommerce-payments'
			);

			const body = `${ __(
				'We are submitting evidence in response to chargeback',
				'woocommerce-payments'
			) } #${ caseNumber } ${ __(
				'for transaction',
				'woocommerce-payments'
			) } #${ transactionId } ${ __(
				'on',
				'woocommerce-payments'
			) } ${ transactionDate }.

${ __(
	'Our records indicate that the customer and legitimate cardholder,',
	'woocommerce-payments'
) } ${ customerName }, ${ __(
				'ordered',
				'woocommerce-payments'
			) } ${ product } ${ __(
				'on',
				'woocommerce-payments'
			) } ${ orderDate }.

${ __(
	'To support our case, we are providing the following documentation:',
	'woocommerce-payments'
) }
${ attachmentsList }

${ __(
	'Based on this information, we respectfully request that the chargeback be reversed. Please let me know if any further details are required.',
	'woocommerce-payments'
) }`;

			const closing = `${ __( 'Thank you,', 'woocommerce-payments' ) }
${ merchantName }`;

			// Combine all sections with proper spacing
			const generatedContent = `${ header }

${ recipient }

${ greeting }

${ body }

${ closing }`;

			setAutoGeneratedContent( generatedContent );
			return generatedContent;
		};

		// Generate content first to compare with loaded value
		const generatedContent = generateCoverLetter();

		// If there's a value already set (from saved uncategorized_text), compare it with generated content
		if ( value ) {
			if ( value !== generatedContent ) {
				// Content differs from what would be auto-generated, mark as edited
				onChange( value, true );
			}
			return;
		}

		// No saved value, use generated content
		if ( isAutoGenerating ) {
			onChange( generatedContent, false );
		}
	}, [
		dispute,
		onChange,
		isAutoGenerating,
		value,
		autoGeneratedContent,
		bankName,
		accountDetails,
		settings,
	] );

	const handleViewCoverLetter = () => {
		const htmlContent = `
			<!DOCTYPE html>
			<html>
			<head>
				<meta charset="UTF-8">
				<title>${ __( 'Cover Letter', 'woocommerce-payments' ) }</title>
				<style>
					body {
						font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
						line-height: 1.6;
						max-width: 120ch;
						margin: 40px auto;
						padding: 20px;
						text-align: justify;
					}
					pre {
						white-space: pre-wrap;
						word-wrap: break-word;
						word-break: break-word;
						overflow-wrap: break-word;
						max-width: 100%;
					}
					@media print {
						body {
							margin: 0;
							padding: 20px;
							font-size: 12px;
						}
						pre {
							font-size: 12px;
						}
						.no-print {
							display: none;
						}
					}
					.print-button-container {
						position: fixed;
						bottom: 20px;
						left: 50%;
						transform: translateX(-50%);
						background: white;
						padding: 10px;
						border-radius: 4px;
						box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
					}
					@media print {
						.print-button-container {
							display: none;
						}
					}
				</style>
			</head>
			<body>
				<pre>${ value }</pre>
				<div class="print-button-container no-print">
					<button onclick="window.print()" style="
						padding: 8px 16px;
						background: #3B5AFB;
						color: white;
						border: none;
						border-radius: 4px;
						cursor: pointer;
					">
						${ __( 'Print Cover Letter', 'woocommerce-payments' ) }
					</button>
				</div>
			</body>
			</html>
		`;

		const blob = new Blob( [ htmlContent ], { type: 'text/html' } );
		const url = URL.createObjectURL( blob );
		const printWindow = window.open( url, '_blank' );

		// Clean up the blob URL after the window loads
		if ( printWindow ) {
			printWindow.onload = () => {
				URL.revokeObjectURL( url );
			};
		}
	};

	const handleTextareaChange = ( newValue: string ) => {
		// If the value is empty, set the auto-generated content
		if ( newValue.trim() === '' ) {
			setIsAutoGenerating( true );
			onChange( autoGeneratedContent, false );
			return;
		}
		setIsAutoGenerating( false );
		onChange( newValue, newValue !== autoGeneratedContent );
	};

	return (
		<section className="wcpay-dispute-evidence-cover-letter">
			<TextareaControl
				label={ __( 'COVER LETTER', 'woocommerce-payments' ) }
				value={ value }
				onChange={ handleTextareaChange }
				rows={ 30 }
				className="wcpay-dispute-evidence-cover-letter__textarea"
			/>
			<Button
				className="wcpay-dispute-evidence-cover-letter__print"
				variant="primary"
				onClick={ handleViewCoverLetter }
				icon={ <Icon icon={ external } size={ 24 } /> }
			>
				{ __( 'View cover letter', 'woocommerce-payments' ) }
			</Button>
		</section>
	);
};

export default CoverLetter;
